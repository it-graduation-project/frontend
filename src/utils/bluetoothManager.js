/*
  bluetoothManager.js - Î∏îÎ£®Ìà¨Ïä§ Ïó∞Í≤∞ Î∞è FFT Îç∞Ïù¥ÌÑ∞ Ï†ÑÏÜ° Í¥ÄÎ¶¨
  -------------------------------------------------
  - Web Bluetooth APIÎ•º ÏÇ¨Ïö©ÌïòÏó¨ ESP32ÏôÄ Ïó∞Í≤∞
  - FFT Î∂ÑÏÑù Îç∞Ïù¥ÌÑ∞Î•º ESP32Î°ú Ï†ÑÏÜ°ÌïòÏó¨ ÏßÑÎèô Î™®ÌÑ∞Î•º Ï†úÏñ¥
  - Î∏îÎ£®Ìà¨Ïä§ Ïó∞Í≤∞ ÏÉÅÌÉúÎ•º ÏãúÍ∞ÅÌôî Ï∞ΩÍ≥º ÎèôÍ∏∞Ìôî
*/

let bluetoothDevice = null;
let bluetoothServer = null;
let bluetoothCharacteristic = null;
let isConnected = false;
let fftStreamingInterval = null;

// ‚úÖ Î∏îÎ£®Ìà¨Ïä§ Ïó∞Í≤∞ Ìï®Ïàò
export const connectBluetooth = async () => {
  try {
    console.log("üîç Searching for ESP32 Bluetooth device...");

    // ‚ú® Í∏∞Ï°¥ Î∏îÎ£®Ìà¨Ïä§ Ïó∞Í≤∞Ïù¥ ÏûàÏúºÎ©¥ Î®ºÏ†Ä Ìï¥Ï†ú
    if (bluetoothDevice) {
      console.warn("‚ö†Ô∏è Existing Bluetooth device found. Disconnecting...");
      disconnectBluetooth();
    }

    bluetoothDevice = await navigator.bluetooth.requestDevice({
      acceptAllDevices: true,
      optionalServices: ["12345678-1234-5678-1234-56789abcdef0"],
    });

    bluetoothDevice.addEventListener("gattserverdisconnected", handleDisconnect); // ‚úÖ Ïó∞Í≤∞ ÎÅäÍπÄ Í∞êÏßÄ Ï∂îÍ∞Ä

    bluetoothServer = await bluetoothDevice.gatt.connect();
    const service = await bluetoothServer.getPrimaryService("12345678-1234-5678-1234-56789abcdef0");
    bluetoothCharacteristic = await service.getCharacteristic("abcd1234-5678-9876-5432-10abcdef1234");

    isConnected = true;
    console.log("‚úÖ Connected to device:", bluetoothDevice.name);
    notifyVisualizer("connected");
    
    return true;
  } catch (error) {
    console.error("‚ùå Bluetooth connection failed:", error);
    return false;
  }
};

// ‚úÖ Î∏îÎ£®Ìà¨Ïä§ Ïó∞Í≤∞ Ìï¥Ï†ú Ìï®Ïàò
export const disconnectBluetooth = async () => {
  if (bluetoothDevice) {
    console.log("üî¥ Disconnecting Bluetooth...");

    if (bluetoothDevice?.gatt?.connected) {
      bluetoothDevice.gatt.disconnect();
    }

    bluetoothDevice = null;  // ‚úÖ Í∏∞Ï°¥ Î∏îÎ£®Ìà¨Ïä§ Í∞ùÏ≤¥ Ï¥àÍ∏∞Ìôî
  }

  isConnected = false;
  stopStreamingFFTData();
  notifyVisualizer("disconnected");

  // ‚ú® BLE AdapterÎ•º Í∞ïÏ†ú Î¶¨ÌîÑÎ†àÏãúÌïòÏó¨ ESP32Í∞Ä Îã§Ïãú Í≤ÄÏÉâÎêòÎèÑÎ°ù Ìï®
  const available = await navigator.bluetooth.getAvailability();
  if (available) {
    console.log("üîÑ Bluetooth adapter refreshed. Ready for reconnection.");
  } else {
    console.warn("‚ö†Ô∏è Bluetooth adapter not available.");
  }
};

// ‚úÖ Ïó∞Í≤∞ ÎÅäÍπÄ Í∞êÏßÄ Ìï∏Îì§Îü¨ (ÏûêÎèô Ïû¨Ïó∞Í≤∞ Î∞©ÏßÄ)
function handleDisconnect() {
  console.warn("‚ö†Ô∏è Bluetooth connection lost!");
  isConnected = false;
  notifyVisualizer("disconnected");

  // ‚ú® ÏûêÎèô Ïû¨Ïó∞Í≤∞ÏùÑ ÎßâÍ≥†, ÏÉàÎ°úÏö¥ Í∏∞Í∏∞ Í≤ÄÏÉâÏùÑ ÏúÑÌï¥ Í∏∞Ï°¥ Í∞ùÏ≤¥ Ï†úÍ±∞
  bluetoothDevice = null;
}

// ‚úÖ FFT Îç∞Ïù¥ÌÑ∞Î•º ESP32Î°ú Ï†ÑÏÜ°ÌïòÎäî Ìï®Ïàò
export const sendFFTDataToESP32 = async (value) => {
  if (!isConnected || !bluetoothCharacteristic) return;
  try {
    let data = new Uint8Array([value]); // 0~255 Î≤îÏúÑ Ïú†ÏßÄ
    await bluetoothCharacteristic.writeValue(data);
    console.log(`üì° Sent FFT Data: ${value}`);
  } catch (error) {
    console.error("‚ùå FFT Îç∞Ïù¥ÌÑ∞ Ï†ÑÏÜ° Ïã§Ìå®:", error);
  }
};

// ‚úÖ FFT Îç∞Ïù¥ÌÑ∞ Ïä§Ìä∏Î¶¨Î∞ç ÏãúÏûë
export const startStreamingFFTData = () => {
  if (!isConnected || fftStreamingInterval) return;

  console.log("üéµ Starting FFT Data Streaming...");
  fftStreamingInterval = setInterval(() => {
    window.postMessage({ type: "requestFFT" }, "*");
  }, 100);
};

// ‚úÖ FFT Îç∞Ïù¥ÌÑ∞ Ïä§Ìä∏Î¶¨Î∞ç Ï§ëÎã®
export const stopStreamingFFTData = () => {
  if (fftStreamingInterval) {
    clearInterval(fftStreamingInterval);
    fftStreamingInterval = null;
    console.log("‚èπÔ∏è Stopped FFT Data Streaming.");
  }
};

// ‚úÖ Î∏îÎ£®Ìà¨Ïä§ Ïó∞Í≤∞ ÏÉÅÌÉú Î∞òÌôò
export const getBluetoothStatus = () => {
  return isConnected && bluetoothDevice?.gatt?.connected;
};

// ‚úÖ ÏãúÍ∞ÅÌôî Ï∞ΩÏóê Î∏îÎ£®Ìà¨Ïä§ ÏÉÅÌÉú Ï†ÑÎã¨ (PostMessage)
function notifyVisualizer(status) {
  // Í∏∞Ï°¥ Ï∞ΩÏù¥ Ïó¥Î†§ ÏûàÎäîÏßÄ ÌôïÏù∏ ÌõÑ Î©îÏãúÏßÄ Ï†ÑÏÜ°
  const visualizerWindows = window.visualizerWindows || [];
  
  if (visualizerWindows.length > 0) {
    visualizerWindows.forEach(win => {
      if (win && !win.closed) {
        win.postMessage({ type: "bluetoothStatus", status }, "*");
      }
    });
  } else {
    console.warn("‚ö†Ô∏è No visualizer window open. Skipping message.");
  }
}
